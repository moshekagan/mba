# -*- coding: utf-8 -*-
"""032545261Final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ua4sj2zp1GrZg1qYDainmDGL4yIRHV79
"""

import pandas as pd
from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score
from sklearn.metrics import f1_score
## prediction libraries
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler

churn_training_df = pd.read_csv('churn_training.csv')
print(churn_training_df.head())
print(churn_training_df.shape)

churn_training_df['MonthlyCharges'] = pd.to_numeric(churn_training_df['MonthlyCharges'], errors='coerce')
churn_training_df['TotalCharges'] = pd.to_numeric(churn_training_df['TotalCharges'], errors='coerce')
churn_training_df['tenure'] = pd.to_numeric(churn_training_df['tenure'], errors='coerce')
churn_training_df['SeniorCitizen'] = pd.to_numeric(churn_training_df['SeniorCitizen'], errors='coerce')
print(churn_training_df.isna().any(axis=0))

churn_training_df["MonthlyCharges"].fillna(churn_training_df["MonthlyCharges"].median(), inplace=True)
churn_training_df["TotalCharges"].fillna(churn_training_df["TotalCharges"].median(), inplace=True)
churn_training_df["tenure"].fillna(churn_training_df["tenure"].median(), inplace=True)
churn_training_df["SeniorCitizen"].fillna(churn_training_df["SeniorCitizen"].median(), inplace=True)

churn_training_df['Partner'].fillna(churn_training_df['Partner'].mode()[0], inplace=True)
churn_training_df['Dependents'].fillna(churn_training_df['Dependents'].mode()[0], inplace=True)
churn_training_df['InternetService'].fillna(churn_training_df['InternetService'].mode()[0], inplace=True)
churn_training_df['DeviceProtection'].fillna(churn_training_df['DeviceProtection'].mode()[0], inplace=True)
churn_training_df['StreamingMovies'].fillna(churn_training_df['StreamingMovies'].mode()[0], inplace=True)
churn_training_df['Contract'].fillna(churn_training_df['Contract'].mode()[0], inplace=True)
churn_training_df['PaymentMethod'].fillna(churn_training_df['PaymentMethod'].mode()[0], inplace=True)

print(churn_training_df.isna().any(axis=0))

print(churn_training_df.info())

churn_training_dummies_df = pd.get_dummies(churn_training_df, columns=["gender", "Partner", "Dependents", "PhoneService", "MultipleLines", "InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn"], drop_first=True, dtype=int)

print(churn_training_dummies_df.info())
churn_training_dummies_df.describe(include='all')

## partition the data
X = churn_training_dummies_df.drop(["customerID", "Churn_Yes"], axis=1)
y = churn_training_dummies_df["Churn_Yes"]

feature_columns = X.columns.tolist()

# Split the data into training and holdout sets (e.g., 80% training, 20% holdout)
X_train, X_value, y_train, y_value = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

## normalize the data
# Normalize the features for KNN
#help(MinMaxScaler())
scaler = StandardScaler()
X_train_normalized = scaler.fit_transform(X_train)
X_value_normalized = scaler.transform(X_value)

## train model on the training set
KNN_model = KNeighborsClassifier(n_neighbors=33) ## choose different k values
KNN_model.fit(X_train_normalized, y_train)

## predict base on train and evaluate the value
KNN_pred = KNN_model.predict(X_value_normalized)
cm = confusion_matrix(y_value, KNN_pred)
accuracy = accuracy_score(y_value, KNN_pred)
recall = recall_score(y_value, KNN_pred)
precision = precision_score(y_value, KNN_pred)
f1 = f1_score(y_value, KNN_pred)

print("Confusion Matrix:")
print(cm)
print("Overall Accuracy:", accuracy)
print("Recall:", recall)
print("Precision:", precision)
print("F1-score:", f1)

print("")
## predict on holdout and evaluate
churn_holdout_df = pd.read_csv('churn_holdout.csv')

churn_holdout_df['MonthlyCharges'] = pd.to_numeric(churn_holdout_df['MonthlyCharges'], errors='coerce')
churn_holdout_df['TotalCharges'] = pd.to_numeric(churn_holdout_df['TotalCharges'], errors='coerce')
churn_holdout_df['tenure'] = pd.to_numeric(churn_holdout_df['tenure'], errors='coerce')
churn_holdout_df['SeniorCitizen'] = pd.to_numeric(churn_holdout_df['SeniorCitizen'], errors='coerce')
print(churn_training_df.isna().any(axis=0))

churn_holdout_df["MonthlyCharges"].fillna(churn_holdout_df["MonthlyCharges"].median(), inplace=True)
churn_holdout_df["TotalCharges"].fillna(churn_holdout_df["TotalCharges"].median(), inplace=True)
churn_holdout_df["tenure"].fillna(churn_holdout_df["tenure"].median(), inplace=True)
churn_holdout_df["SeniorCitizen"].fillna(churn_holdout_df["SeniorCitizen"].median(), inplace=True)

churn_holdout_df['Partner'].fillna(churn_training_df['Partner'].mode()[0], inplace=True)
churn_holdout_df['Dependents'].fillna(churn_training_df['Dependents'].mode()[0], inplace=True)
churn_holdout_df['InternetService'].fillna(churn_training_df['InternetService'].mode()[0], inplace=True)
churn_holdout_df['DeviceProtection'].fillna(churn_training_df['DeviceProtection'].mode()[0], inplace=True)
churn_holdout_df['StreamingMovies'].fillna(churn_holdout_df['StreamingMovies'].mode()[0], inplace=True)
churn_holdout_df['Contract'].fillna(churn_holdout_df['Contract'].mode()[0], inplace=True)
churn_holdout_df['PaymentMethod'].fillna(churn_holdout_df['PaymentMethod'].mode()[0], inplace=True)

print(churn_holdout_df.isna().any(axis=0))
print(churn_holdout_df.info())

churn_holdout_dummies_df = pd.get_dummies(churn_holdout_df, columns=["gender", "Partner", "Dependents", "PhoneService", "MultipleLines", "InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "Churn"], drop_first=True, dtype=int)

print(churn_holdout_dummies_df.info())

X_hold = churn_holdout_dummies_df.reindex(columns=feature_columns, fill_value=0)

X_hold_normalized = scaler.transform(X_hold)
KNN_hold_pred = KNN_model.predict(X_hold_normalized)

final_holdout_pred_df = pd.DataFrame({
    "customerID": churn_holdout_dummies_df["customerID"],
    "Churn_Prediction": KNN_hold_pred
})

final_holdout_pred_df.to_csv("032545261.csv", index=False)

